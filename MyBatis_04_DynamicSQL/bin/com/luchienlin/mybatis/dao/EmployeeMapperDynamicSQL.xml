<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.luchienlin.mybatis.dao.EmployeeMapperDynamicSQL">
<!-- 
namespace：名稱空間
id：唯一標示
resultType：返回值類型
#{id}：從傳遞過來的參數中取出id值
 -->
 <!-- 
 	if：判斷
 	choose(when, otherwise)：分支選擇：帶了break的switch-case
 		如果帶了id就用id查，如果帶了lastName就用lastName查;只會進入其中一個
 	trim：字符串擷取(where(封裝查詢條件), set(封裝修改條件))
 	foreach
  -->
	<!-- 查詢員工，要求，攜帶了哪個字段查詢條件就戴上字段的值 -->
	<!--  public List<Employee> getEmpsByConditionIf(Employee employee); -->
	<select id="getEmpsByConditionIf" resultType="com.luchienlin.mybatis.bean.Employee">
		select * from tb1_employee
		<!-- where 1=1--> 
		<where>
		<!--  test：判斷表達是(OGNL表達式)：c: if test
		OGNL參照PPT或者官方文件 
		從參數中取值進行判斷
		遇見特殊符號應該去寫轉義字符
		W3school查的到
		&&:也是特殊字符-->
		<!-- id不是空，才進行判斷 -->
		<if test="id!=null">
			id=#{id}
		</if>
		<!-- lastName不是空且lastName不是空白，可以用''單引號判斷，或是用特殊符號的轉譯字，可以從W3School查 -->
		<if test="lastName!=null  &amp;&amp;  lastName!=&quot; &quot;">
			and last_name like #{lastName}
		</if>
		<if test="email !=null and email.trim()!=&quot;&quot;">
			and email=#{email} 
		</if>
		<!-- ognl會進行字符串與數字的轉換 -->
		<if test="gender ==0 or gender==1">
			and gender=#{gender}
		</if>
		</where>
		
		
	</select>

	<!-- public List<Employee> getEmpsByConditionTrim(Employee employee); -->
	<select id="getEmpsByConditionTrim" resultType="com.luchienlin.mybatis.bean.Employee">
		select * from tb1_employee
		<!-- where 1=1--> 
		<!--  後面多出的and或者or where標籤不能解決 
			prefix=""：前綴：trim標籤體中整個字符串拚串後的結果。
							prefix給拚串後的整個字符串加一個前綴
			prefixOverrides=""：前綴覆蓋，前綴多了甚麼我給你覆蓋
			suffix=""：後綴
							suffix給娉串後的整個字符串加一個後綴 
			suffixOverrides=""：後綴覆蓋：去掉整個字幅串後面多餘的字符
		-->
		<!-- 自定義字幅串的擷取規則 -->
		<trim prefix="where" suffixOverrides="and"> <!-- 前面加一個where，後面有and的都給我去掉 -->
		<!--  test：判斷表達是(OGNL表達式)：c: if test
		OGNL參照PPT或者官方文件 
		從參數中取值進行判斷
		遇見特殊符號應該去寫轉義字符
		W3school查的到
		&&:也是特殊字符-->
		<!-- id不是空，才進行判斷 -->
		<if test="id!=null">
			id=#{id} and
		</if>
		<!-- lastName不是空且lastName不是空白，可以用''單引號判斷，或是用特殊符號的轉譯字，可以從W3School查 -->
		<if test="lastName!=null  &amp;&amp;  lastName!=&quot; &quot;">
			last_name like #{lastName} and
		</if>
		<if test="email !=null and email.trim()!=&quot;&quot;">
			email=#{email} and 
		</if>
		<!-- ognl會進行字符串與數字的轉換 -->
		<if test="gender ==0 or gender==1">
			gender=#{gender} 
		</if>
		</trim>
	</select>
	
	<!-- public List<Employee> getEmpsByConditionChoose(Employee employee); -->
	<select id="getEmpsByConditionChoose" resultType="com.luchienlin.mybatis.bean.Employee">
		select * from tb1_employee 
		<where>
			<!--  如果帶了id就用id查，如果帶了lastName就用lastName查;只會進入其中一個 -->
			<choose>
				<when test="id!=null">
					id=#{id}
				</when>
				<when test="lastName!=null">
					last_name like #{lastName}
				</when>
				<when test="email!=null">
					emai=#{email}
				</when>
				<otherwise>
					 <!-- 其他條件查所有1=1 -->
					 gender = 0
				</otherwise>
			</choose>
		</where>
	</select>
	
	<!-- public void updateEmp(Employee employee); -->
	<!-- 為了改成哪一列標籤就更新哪一個，而不要全部的條件都有才更新 -->
	<update id="updateEmp">
	update tb1_employee
	<!--Set標籤的使用  -->
	<set>
		<if test="lastName!=null">
			last_name=#{lastName},
		</if>
		<if test="email!=null">
			email=#{email},
		</if>
		<if test="gender=null">
			gender=#{gender}
		</if>
	</set>
	<!-- Trim：更新拚串 -->
	<!--  <trim prefix="set" suffixOverrides=",">  前面加一個set，然後後面"，"忽略 
		<if test="lastName!=null">
			last_name=#{lastName},
		</if>
		<if test="email!=null">
			email=#{email},
		</if>
		<if test="gender=null">
			gender=#{gender}
		</if>
	</trim>
	-->
	where id=#{id}
	</update>
	
	 <!--public List<Employee> getEmpsByConditionForeach(List<Integer> ids);  -->
	 <select id="getEmpsByConditionForeach" resultType="com.luchienlin.mybatis.bean.Employee">
	 	select * from tb1_employee 
	 	<!--
	 		collection：指定要遍历的集合：
	 		list类型的参数会特殊处理封装在map中，map的key就叫list
	 		item：将当前遍历出的元素赋值给指定的变量
	 		separator:每个元素之间的分隔符
	 		open：遍历出所有结果拼接一个开始的字符
	 		close:遍历出所有结果拼接一个结束的字符
	 		index:索引。遍历list的时候是index就是索引，item就是当前值
	 				      遍历map的时候index表示的就是map的key，item就是map的值
	 		
	 		#{变量名}就能取出变量的值也就是当前遍历出的元素
	 	  -->
	 	<foreach collection="list" item="item_id" separator=","
	 		open="where id in (" close=")">
	 		#{item_id}
	 	</foreach>
	 </select>
	 
	 <!-- 批量保存 -->
	 <!--  public void addEmps(@Param("emps")List<Employee> emps); -->
	 <!-- MySQL下批量表存：可以forEach遍歷，mysql支持values(),(),()語法 -->
	<insert id="addEmps">
	 	insert into tb1_employee(
	 		<include refid="insertColumn"></include>
	 	) 
	 	values
	 	<foreach collection="emps" item="emp" separator=",">
	 		 (#{emp.lastName}, #{emp.email}, #{emp.gender}, #{emp.dept.id})
	 	</foreach> 
	 </insert>
	
	<!-- 這種方式需要數據庫連結屬性allowMultiQueries=true
			這種分號分隔多個sql可以用於其他的批量操作(修改，刪除) -->
	<insert id="addEmps">
		<foreach collection="emps" item="emp" separator=";">
				insert into tb1_employee(last_name, email, gender, d_id) 
	 	values (#{emp.lastName}, #{emp.email}, #{emp.gender}, #{emp.dept.id})
		</foreach>
	</insert>
	
	<!-- 兩個內置參數
			不只是方法傳遞過來的參數可以被用來判斷，取值。。。
			mybatis默認還有兩個內置參數：
			_parameter：代表整個參數
				單個：參數會被封裝為一個map：_parameter就是代表這個map
				
			_databaseId：如果配置了DatabaseIdProvider標籤。
				_databaseId就是代表當前數據庫的別名ORACLE
	 -->
	 <!-- public List<Employee> getEmpsTestInnerParameter(Employee employee); -->
	<select id="getEmpsTestInnerParameter" resultType="com.luchienlin.mybatis.bean.Employee">
				<!-- bind：可以將OGNL表達是的值綁訂到一個變量中，方便後來引用這個變量的值 -->
				<bind name="_lastName" value="'_'+lastName+'%'"/>
				<if test="_databaseId=='mysql'">
				select * from tb1_employee
				<if test="_parameter!=null">
					where last_name  like  #{_lastName}
				</if>
		</if>
		<if test="_databaseId=='oracle'">
				select * from employees
		</if>

	</select>
	
	<!-- 抽取可重用的SQL片段。方便後面引用 -->
	 <sql id="insertColumn">
		<if test="_databaseId=='mysql'">
			last_name,email,gender,d_id
		</if>
	</sql> 
 </mapper>